{"version":3,"sources":["components/AddDialog/AddDialog.js","components/Cell/Cell.js","components/SimpleTable.js","App.js","serviceWorker.js","index.js"],"names":["AddDialog","props","handleAdd","obj","subjectName","state","facultyName","meetLink","lectureType","key","row","column","dialogOnClose","onInfoEntered","JSON","stringify","handleSubjectChange","event","setState","target","value","handleFacultyChange","handleMeetLink","handelLectureType","isDialogOpen","bind","Dialog","open","onClose","this","DialogTitle","id","DialogContent","TextField","autoFocus","margin","label","type","fullWidth","variant","onChange","FormControl","InputLabel","Select","labelId","MenuItem","DialogActions","Button","onClick","dialogCloseHandler","color","Component","Cell","showDialog","isDialogShowing","hideDialog","handlePaperClick","url","data","console","log","undefined","window","URL","focus","handleMouseExit","handleMouseEnter","isHovering","saveToStorage","getDataFromStorage","localStorage","setItem","parse","getItem","classes","className","onMouseEnter","onMouseLeave","IconButton","aria-label","fontSize","Paper","root","childDiv","withStyles","theme","height","width","borderRadius","display","alignItems","cursor","useStyles","makeStyles","table","minWidth","rows","times","SimpleTable","TableContainer","component","Table","size","TableHead","TableRow","TableCell","map","time","align","TableBody","temp","scope","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a6b86d47.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nclass AddDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            subjectName: '',\n            facultyName: '',\n            meetLink: '',\n            lectureType: 0,\n            isDialogOpen: true\n        }\n        this.handleFacultyChange = this.handleFacultyChange.bind(this);\n        this.handleSubjectChange = this.handleSubjectChange.bind(this);\n        this.handleMeetLink = this.handleMeetLink.bind(this);\n        this.dialogOnClose = this.dialogOnClose.bind(this);\n        this.handleAdd = this.handleAdd.bind(this);\n    }\n\n    handleAdd = () => {\n        //console.log(this.state.subjectName);\n        const obj = {\n            subjectName: this.state.subjectName,\n            facultyName: this.state.facultyName,\n            meetLink: this.state.meetLink,\n            lectureType: this.state.lectureType,\n        };\n        const key = this.props.row + \"x\" + this.props.column;\n        this.dialogOnClose();\n        this.props.onInfoEntered(key, JSON.stringify(obj));\n\n    }\n\n    handleSubjectChange = (event) => {\n        this.setState({\n            subjectName: event.target.value\n        });\n    }\n\n    handleFacultyChange = (event) => {\n        this.setState({\n            facultyName: event.target.value\n        })\n    }\n\n    handleMeetLink = (event) => {\n        this.setState({\n            meetLink: event.target.value\n        })\n    }\n\n    handelLectureType = (event) => {\n        this.setState({\n            lectureType: event.target.value\n        })\n    }\n\n    dialogOnClose = () => {\n        this.setState({\n            isDialogOpen: false\n        })\n    }\n    render() {\n        return (\n            <div>\n\n                <Dialog open={true} onClose={this.dialogOnClose}>\n                    <DialogTitle id=\"form-dialog-title\">Add a lecture</DialogTitle>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"subjeuctName\"\n                            label=\"Subject Name\"\n                            type=\"text\"\n                            fullWidth\n                            variant=\"outlined\"\n                            onChange={this.handleSubjectChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"facultyName\"\n                            label=\"Faculty Name\"\n                            type=\"text\"\n                            fullWidth\n                            variant=\"outlined\"\n                            onChange={this.handleFacultyChange}\n                        />\n                        <FormControl variant=\"outlined\" fullWidth margin=\"dense\">\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Lecture Type</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                value={this.state.lectureType}\n                                onChange={this.handelLectureType}\n                                label=\"Lecture Type\"\n                            >\n                                <MenuItem value={0}>Theory</MenuItem>\n                                <MenuItem value={1}>Lab</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <TextField\n                            margin=\"dense\"\n                            id=\"link\"\n                            label=\"Meeting Link\"\n                            type=\"url\"\n                            fullWidth\n                            variant=\"outlined\"\n                            onChange={this.handleMeetLink}\n                        />\n                        <DialogActions>\n                            <Button onClick={this.props.dialogCloseHandler} color=\"primary\">Close</Button>\n                            <Button onClick={this.handleAdd} color=\"primary\" variant=\"contained\">Add</Button>\n                        </DialogActions>\n                    </DialogContent>\n\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nexport default AddDialog;","import React, { Component } from 'react';\n\nimport AddDialog from '../AddDialog/AddDialog'\nimport './Cell.css'\nimport IconButton from '@material-ui/core/IconButton';\nimport CreateIcon from '@material-ui/icons/Create';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles, useStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n    root: {\n        height: '48px',\n        width: '100%',\n        borderRadius: '8px',\n        display: 'flex',\n        alignItems: 'center',\n        cursor: 'pointer',\n    },\n    childDiv: {\n        margin: 'auto',\n    }\n});\n\nclass Cell extends Component {\n    constructor(props) {\n        super(props);\n        this.handleMouseExit = this.handleMouseExit.bind(this);\n        this.handleMouseEnter = this.handleMouseEnter.bind(this);\n        this.state = {\n            isHovering: false,\n            isDialogShowing: false,\n            data: null\n        };\n        this.showDialog = this.showDialog.bind(this);\n        this.hideDialog = this.hideDialog.bind(this);\n        this.saveToStorage = this.saveToStorage.bind(this);\n        this.getDataFromStorage = this.getDataFromStorage.bind(this);\n        this.handlePaperClick = this.handlePaperClick.bind(this);\n    }\n\n    componentDidMount() {\n        this.getDataFromStorage(this.props.row + \"x\" + this.props.column);\n    }\n\n    handleMouseExit() {\n\n        this.setState({\n            isHovering: false\n        })\n\n    }\n\n    saveToStorage(key, value) {\n        //this.props.onInfoEntered(key, value);\n        localStorage.setItem(key, value);\n        this.setState({\n            data: JSON.parse(value)\n        })\n    }\n\n    getDataFromStorage(key) {\n        let data = localStorage.getItem(key);\n        if (data == null) return;\n        this.setState({\n            data: JSON.parse(data)\n        })\n    }\n\n    handleMouseEnter() {\n\n        this.setState({\n            isHovering: true\n        })\n    }\n\n    showDialog = () => {\n        this.setState({\n            isDialogShowing: true\n        })\n    }\n\n    hideDialog = () => {\n        this.setState({\n            isDialogShowing: false\n        })\n    }\n\n    handlePaperClick = () => {\n        let url = this.state.data.meetLink;\n        console.log(url)\n        if(url == undefined) return;\n        let win = window.open(new URL(url), '_blank');\n        win.focus();\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        if (this.state.data == null) {\n            return (\n                <div >\n                    <div id=\"edit-icon\" className=\"container-div\"\n                        onMouseEnter={this.handleMouseEnter}\n                        onMouseLeave={this.handleMouseExit}\n                    >\n                        {\n                            (this.state.isHovering) ?\n                                <div>\n\n                                    <IconButton aria-label=\"edit\" onClick={this.showDialog}>\n                                        <CreateIcon fontSize=\"inherit\" />\n                                    </IconButton>\n                                </div>\n                                : \"\"\n                        }\n                    </div>\n                    <div id=\"dialog-container\">\n                        {\n\n                            (this.state.isDialogShowing) ? <AddDialog dialogCloseHandler={this.hideDialog} row={this.props.row} column={this.props.column} onInfoEntered={this.saveToStorage} /> : \"\"\n                        }\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <Paper className={classes.root} onClick={this.handlePaperClick}>\n                    <div id=\"details\" className={classes.childDiv}>\n                        {this.state.data.subjectName}\n                    </div>\n                </Paper>\n            )\n        }\n    }\n}\n\nexport default withStyles(styles)(Cell);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Cell from './Cell/Cell';\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 50,\n  },\n\n});\n\nconst rows = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nconst times = ['08:00:09:00', '09:00:10:00', '10:00:11:00', '11:00:12:00', '12:00:13:00', '13:00:14:00', '14:00:15:00', '15:00:16:00', '16:00:17:00', '17:00:18:00', '18:00:19:00']\n\n\n\nconst SimpleTable = () => {\n  const classes = useStyles();\n  let row = -1, column = 0;\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell >Day</TableCell>\n            {\n              times.map((time) => (\n                <TableCell key={time} align=\"center\">{time}</TableCell>\n              ))\n            }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((temp) => {\n            row = row + 1;\n            column = -1;\n            return (\n\n              <TableRow key={temp}>\n                <TableCell component=\"th\" scope=\"row\">\n                  <b>{temp}</b>\n                </TableCell>\n                {\n                  times.map((time) => {\n                    column = column + 1;\n                    return (\n\n                      <TableCell key={temp + time} align=\"center\" >\n                        <Cell column={column} row={row}/>\n                      </TableCell>\n\n                    )\n                  })\n                }\n\n              </TableRow>\n            )\n\n          }\n\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default SimpleTable;","import React, {Component} from 'react';\nimport './App.css';\nimport SimpleTable from './components/SimpleTable'\n\nclass App extends Component{\n  render () {\n    return (\n      <SimpleTable/>\n      \n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}